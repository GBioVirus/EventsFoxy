#!/usr/bin/python

# encoding: utf-8\

import discord

from discord.ext import commands, tasks

import threading

from discord.ext.commands import TextChannelConverter

import asyncio

import random

import time

import json

import requests

from discord import Option

#from discord.ext.games import TicTacToe

from background import keep_alive

from discord.ext.commands import cooldown, BucketType
TOKEN = "add token"

bot = commands.Bot(command_prefix='')
intents = discord.Intents.all()

bot = commands.Bot(command_prefix='k!', intents=intents)

games = []

#MC Role
@bot.slash_command(name="mc", description = "give or remove MC Role")
@commands.has_any_role("Admins", "Global Moderators", "Regional Moderators", "Events MC")
#adm higest role and bot can't give role with permissions'

async def mcrole(
	ctx, 
	member: Option(discord.Member, descripton="Choose MC on event", required = False)):
# if no member is provided, the bot will give the role to the cmd author
	role = ctx.guild.get_role(584839290090160128)
	if not member:
		member = ctx.author
	if role in member.roles:
	   await ctx.respond(f"Good bye {member.mention}!", ephemeral = True)
	   await asyncio.sleep(1)#time
	   await member.remove_roles(role)
	else:
		await member.add_roles(role)
		await ctx.respond(f"Yay you MC now {member.mention}!", ephemeral = True)
		

#Hangman game
#@bot.event
#async def on_reaction_add(reaction, user):
#  if reaction.emoji == '‚ò†Ô∏è':
#    json = find_json(user.id)
#    if json != '':
#      games.remove(json)
#      print(games)
#      await reaction.message.channel.send('Game has been stopped')


#@bot.command(name="h")
#@commands.has_any_role("Events MC")
#async def Hangman(ctx, user1: discord.User, user2: discord.User, chan: discord.TextChannel):
#  await hangman_command(ctx, user1, user2, chan, word)

@bot.slash_command(name="hangman")
@commands.has_any_role("Events MC")
async def hangman(
	ctx, 
	user1: Option(discord.User), 
	user2: Option(discord.User), 
	chan: Option(discord.TextChannel),
	secret_word: Option(str)):
  await hangman_command(ctx, user1, user2, chan, secret_word)
 
def generate_embed(text):
  return discord.Embed(color=0xff0000, description=text)

async def hangman_command(ctx, user1, user2, chan, secret_word):
  if find_json(ctx.author.id):
    await ctx.respond('Game with these players already exists')
    return
  word = ' '.join(secret_word.split())
  msg = await ctx.respond(
    embed=generate_embed(f"<@{user1.id}> & <@{user2.id}>\nWord: {word}"))

  j = {
    "player1": user1.id,
    "player2": user2.id,
    "turn": 1,
    "channel": chan,
    "word": word.lower(),
    "letters": [],
    "messages": [msg],
    "id": len(games),
    "author": ctx.author.id
  }
  i = len(games)

#  await msg.add_reaction('‚ò†Ô∏è')
  games.append(j)
  j['messages'].append(await chan.send(
    embed=generate_embed(f"Welcome to Hangman\n<@{user1.id}> vs <@{user2.id}>")
  ))

async def parse_message(text, json):
  if text.lower().startswith('>') and len(text) > 1:
    if json['word'] == ' '.join(text[1:].split()):
      await json['channel'].send('‚úÖ Correct')
      for i in ''.join(text[1:].split()):
        if i not in json['letters']:
          json['letters'].append(i)
    else:
      await json['channel'].send('üõë Incorrect')
      switch_turn(json)
  elif len(text) != 1 or text in json['letters']:
    await json['channel'].send("‚ö†Ô∏è Please repeat, the letter was used")
    return False
  else:
    if text in json['word']:
      await json['channel'].send('‚úÖ Yup')
    else:
      await json['channel'].send('üõë Nope')
      switch_turn(json)
    json['letters'].append(text)
  await json['channel'].send(
    embed=generate_embed(await generate_hangman_message(json)))
  return True

@bot.event
async def on_message(message):
  if message.author.id == bot.user.id and len(
      message.embeds) == 1 and message.embeds[0].description.startswith(
        'Welcome to Hangman'):
    time.sleep(2)
    game = {}
    for game in games:
      if message in game['messages']:
        break

    await message.channel.send(
      embed=generate_embed(await generate_hangman_message(game)))

    def check(mes):
      return game[
        'player' +
        str(game['turn'])] == mes.author.id and mes.channel == game['channel']

    def json_check(j):
      return j in games

    m = ''
    while json_check(game):
      try:
        m = await bot.wait_for('message', check=check, timeout=30)
        await parse_message(m.content.lower(), game)
      except asyncio.TimeoutError:
        switch_turn(game)
        if json_check(game):
          await game['channel'].send(
            f'Run out of time! Now is turn <@{game["player" + str(game["turn"])]}>'
            )
          
#  elif message.content.startswith('k!'):
    await bot.process_commands(message)

def switch_turn(json):
  if json['turn'] == 1:
    json['turn'] = 2
  else:
    json['turn'] = 1

def find_json(user):
  for i in games:
    if i['author'] == user or i['author'] == user:
      return i
  return ''

async def generate_hangman_message(json):
  global games
  s = f"<@{json['player' + str(json['turn'])]}>\nLetters: {', '.join(json['letters'])}\nTime: 30sec\n\n**"
  count = 0
  for i in json['word']:
    if i in json['letters']:
      s += str(i).upper()
      count += 1
    elif i == ' ':
      s += '\t'
      count += 1
    else:
      s += "ü™∑"
  if count == len(json['word']):
    s += f"**\n**Word is guessed!**\nWinner: <@{json['player' + str(json['turn'])]}>"
    games.remove(json)
    for i in json['messages']:
      await i.edit(
        embed=generate_embed(i.embeds[0].description + f"\n<@{json['player' + str(json['turn'])]}> won!")
      )
  else:
    s += "**\n\nUse >word if you know the word\n<a:30sec:947273928034893825> <a:10sec:947274015867822080>"
  return s



bot.run(TOKEN)
